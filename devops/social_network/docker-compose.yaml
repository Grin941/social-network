services:
  postgres:
    image: postgres:17.5
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      POSTGRES_DB: ${DB__NAME}
    ports:
      - "${DB__PORT}:${DB__PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    volumes:
      - pg-data:/var/lib/postgresql/data

  migration:
    build:
      context: ../..
      dockerfile: devops/Dockerfile
    command: python -m alembic -c social_network/database/migrations/alembic.ini upgrade head
    environment:
      DB__HOST: ${DB__HOST}
      DB__PORT: ${DB__PORT}
      DB__USER: ${DB__USER}
      DB__PASSWORD: ${DB__PASSWORD}
      DB__NAME: ${DB__NAME}
    depends_on:
      postgres:
        condition: service_healthy

  social-network:
    build:
      context: ../..
      dockerfile: devops/Dockerfile
    command: python -m social_network.main
    ports:
      - "${SERVER__BIND_PORT}:${SERVER__BIND_PORT}"
    environment:
      LEVEL: "INFO"
      SERVER__BIND_PORT: ${SERVER__BIND_PORT}
      SERVER__BIND_HOST: "0.0.0.0"
      SERVER__WORKERS: "1"
      DB__TYPENAME: "postgresql+asyncpg"
      DB__HOST: ${DB__HOST}
      DB__PORT: ${DB__PORT}
      DB__USER: ${DB__USER}
      DB__PASSWORD: ${DB__PASSWORD}
      DB__NAME: ${DB__NAME}
      DB__POOL_SIZE: "1"
      AUTH__SECRET: ${AUTH__SECRET}
      AUTH__ALGORITHM: "HS256"
      AUTH__TOKEN_TTL_SECONDS: "604800"
      SENTRY__DSN: ${SENTRY_DSN:-}
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully

volumes:
  pg-data:
